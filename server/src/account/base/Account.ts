/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { IsString, IsOptional, ValidateNested, IsDate } from "class-validator";
import { Beneficiary } from "../../beneficiary/base/Beneficiary";
import { Type } from "class-transformer";
import { Notification } from "../../notification/base/Notification";
import { Transaction } from "../../transaction/base/Transaction";
import { User } from "../../user/base/User";

@ObjectType()
class Account {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  accountNumber!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  accountType!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  balance!: string | null;

  @ApiProperty({
    required: false,
    type: () => Beneficiary,
  })
  @ValidateNested()
  @Type(() => Beneficiary)
  @IsOptional()
  beneficiaries?: Beneficiary | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  currency!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => Notification,
  })
  @ValidateNested()
  @Type(() => Notification)
  @IsOptional()
  notifications?: Notification | null;

  @ApiProperty({
    required: false,
    type: () => Transaction,
  })
  @ValidateNested()
  @Type(() => Transaction)
  @IsOptional()
  receiverAccountId?: Transaction | null;

  @ApiProperty({
    required: false,
    type: () => Transaction,
  })
  @ValidateNested()
  @Type(() => Transaction)
  @IsOptional()
  transactions?: Transaction | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: true,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  userId?: User;
}

export { Account as Account };
