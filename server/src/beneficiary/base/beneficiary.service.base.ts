/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Beneficiary, // @ts-ignore
  Account,
} from "@prisma/client";

export class BeneficiaryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.BeneficiaryCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.BeneficiaryCountArgs>
  ): Promise<number> {
    return this.prisma.beneficiary.count(args);
  }

  async beneficiaries<T extends Prisma.BeneficiaryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BeneficiaryFindManyArgs>
  ): Promise<Beneficiary[]> {
    return this.prisma.beneficiary.findMany(args);
  }
  async beneficiary<T extends Prisma.BeneficiaryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BeneficiaryFindUniqueArgs>
  ): Promise<Beneficiary | null> {
    return this.prisma.beneficiary.findUnique(args);
  }
  async createBeneficiary<T extends Prisma.BeneficiaryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BeneficiaryCreateArgs>
  ): Promise<Beneficiary> {
    return this.prisma.beneficiary.create<T>(args);
  }
  async updateBeneficiary<T extends Prisma.BeneficiaryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BeneficiaryUpdateArgs>
  ): Promise<Beneficiary> {
    return this.prisma.beneficiary.update<T>(args);
  }
  async deleteBeneficiary<T extends Prisma.BeneficiaryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BeneficiaryDeleteArgs>
  ): Promise<Beneficiary> {
    return this.prisma.beneficiary.delete(args);
  }

  async getUserId(parentId: string): Promise<Account | null> {
    return this.prisma.beneficiary
      .findUnique({
        where: { id: parentId },
      })
      .userId();
  }
}
