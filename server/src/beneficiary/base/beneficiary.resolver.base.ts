/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Beneficiary } from "./Beneficiary";
import { BeneficiaryCountArgs } from "./BeneficiaryCountArgs";
import { BeneficiaryFindManyArgs } from "./BeneficiaryFindManyArgs";
import { BeneficiaryFindUniqueArgs } from "./BeneficiaryFindUniqueArgs";
import { CreateBeneficiaryArgs } from "./CreateBeneficiaryArgs";
import { UpdateBeneficiaryArgs } from "./UpdateBeneficiaryArgs";
import { DeleteBeneficiaryArgs } from "./DeleteBeneficiaryArgs";
import { Account } from "../../account/base/Account";
import { BeneficiaryService } from "../beneficiary.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Beneficiary)
export class BeneficiaryResolverBase {
  constructor(
    protected readonly service: BeneficiaryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Beneficiary",
    action: "read",
    possession: "any",
  })
  async _beneficiariesMeta(
    @graphql.Args() args: BeneficiaryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Beneficiary])
  @nestAccessControl.UseRoles({
    resource: "Beneficiary",
    action: "read",
    possession: "any",
  })
  async beneficiaries(
    @graphql.Args() args: BeneficiaryFindManyArgs
  ): Promise<Beneficiary[]> {
    return this.service.beneficiaries(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Beneficiary, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Beneficiary",
    action: "read",
    possession: "own",
  })
  async beneficiary(
    @graphql.Args() args: BeneficiaryFindUniqueArgs
  ): Promise<Beneficiary | null> {
    const result = await this.service.beneficiary(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Beneficiary)
  @nestAccessControl.UseRoles({
    resource: "Beneficiary",
    action: "create",
    possession: "any",
  })
  async createBeneficiary(
    @graphql.Args() args: CreateBeneficiaryArgs
  ): Promise<Beneficiary> {
    return await this.service.createBeneficiary({
      ...args,
      data: {
        ...args.data,

        userId: {
          connect: args.data.userId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Beneficiary)
  @nestAccessControl.UseRoles({
    resource: "Beneficiary",
    action: "update",
    possession: "any",
  })
  async updateBeneficiary(
    @graphql.Args() args: UpdateBeneficiaryArgs
  ): Promise<Beneficiary | null> {
    try {
      return await this.service.updateBeneficiary({
        ...args,
        data: {
          ...args.data,

          userId: {
            connect: args.data.userId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Beneficiary)
  @nestAccessControl.UseRoles({
    resource: "Beneficiary",
    action: "delete",
    possession: "any",
  })
  async deleteBeneficiary(
    @graphql.Args() args: DeleteBeneficiaryArgs
  ): Promise<Beneficiary | null> {
    try {
      return await this.service.deleteBeneficiary(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Account, {
    nullable: true,
    name: "userId",
  })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async getUserId(
    @graphql.Parent() parent: Beneficiary
  ): Promise<Account | null> {
    const result = await this.service.getUserId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
